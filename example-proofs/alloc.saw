enable_experimental;

include "../lib/list.saw";
include "../lib/soroban.saw";

// Load linked-mir.json generated by cargo saw-build
mod <- mir_load_module "../soroban-examples/alloc/target/linked-mir.json";

// Initialize soroban verification with no extra features
soroban <- soroban_init mod [];

// Declare parameterized specification for sum function
// SAW does not support unbounded loops, so we parameterize the spec by a SAW
// Int which can be used as a Cryptol type-level natural number
let sum_spec count = soroban.spec "sum" (\(s : SorobanSpecAPI) -> do {

  // Execute the function with an instance of Env and the fixed count
  mir_execute_func [soroban.smi.EnvVal (), mir_term {{ `count : [32] }}];

  // Check that the result is sum of 0 up to (but not including) count
  mir_return (mir_term {{ sum [0..<count] : [32] }});

});

// Verify sum for count = 0 through 10
for (list.range 0 10) (\count -> do {
  print (str_concats ["Verifying sum(", show count, ")"]);
  soroban.verify {
    fun = "soroban_alloc_contract::{impl#1}::sum",
    overrides = [],
    path_sat = true,
    spec = sum_spec count,
    proof = z3
  };
});
