module Map where

type Entry k v =
  { key : k
  , val : v
  , exists : Bit
  }

type Map n k v = [n](Entry k v)

elem : {n, k, v} (fin n, Eq k) => k -> Map n k v -> Bit
elem k = any (\e -> e.key == k /\ e.exists)

lookup : {n, k, v} (fin n, Eq k, Zero v) => k -> Map n k v -> (Bit, v)
lookup k = foldl
  (\res e -> if e.key == k /\ e.exists then (True, e.val) else res)
  (False, zero)

set : {n, k, v} (fin n, Eq k) => k -> v -> Map n k v -> Map n k v
set k v = map (\e -> if e.key == k then { e | val = v, exists = True } else e)

lookup_elem : {n, k, v} (fin n, Eq k, Zero v) => k -> Map n k v -> Bit
property lookup_elem k m = (lookup k m).0 == elem k m
