module RawVal where

import Tag as Tag
import Tag (Tag)

type RawVal = [64]

get_tag : RawVal -> Tag
get_tag = drop

try_convert_u32 : RawVal -> (Bit, [32])
try_convert_u32 rv = (is_val_type_u32 rv, unchecked_from_val_u32 rv)

from_u32 : [32] -> RawVal
from_u32 u = from_major_minor_and_tag u 0 Tag::u32

from_symbol_small : Body -> RawVal
from_symbol_small body = from_body_and_tag body Tag::symbol_small

private

  type Body = [56]
  type Major = [32]
  type Minor = [24]

  has_tag : Tag -> RawVal -> Bit
  has_tag t rv = get_tag rv == t

  is_val_type_u32 : RawVal -> Bit
  is_val_type_u32 = has_tag Tag::u32

  unchecked_from_val_u32 : RawVal -> [32]
  unchecked_from_val_u32 = get_major

  from_body_and_tag : Body -> Tag -> RawVal
  from_body_and_tag body tag = body # tag

  from_major_minor_and_tag : Major -> Minor -> Tag -> RawVal
  from_major_minor_and_tag major minor = from_body_and_tag (major # minor)

  get_body : RawVal -> Body
  get_body = take

  get_major : RawVal -> Major
  get_major rv = take (get_body rv)
