enable_experimental;

include "../lib/option.saw";
include "../lib/soroban.saw";

mod <- mir_load_module "target/wasm32-unknown-unknown/release/deps/soroban_increment_contract-516a4d3c39f27127.linked-mir.json";

soroban <- soroban_init mod;

let Storage = soroban.cry.Storage;
let Symbol = soroban.cry.Symbol;

let COUNTER = {{ Symbol::short "COUNTER" }};

let increment_spec = soroban.spec "increment" (\(s : SorobanSpecAPI) -> do {

  storage <- s.fresh "storage" {| Storage::T |};

  let counter_val = s.storage.get storage COUNTER {| [32] |};
  count <- option.unwrap {{ Option::unwrap_or counter_val (Option::ok 0) }};
  mir_precond {{ count < 1000 }};

  s.storage.state storage;

  mir_execute_func [s.mir_value.Env];

  let count' = {{ count + 1 }};

  s.storage.state (s.storage.set storage COUNTER count');

  mir_return (mir_term count');

});

soroban.verify {
  fun = "soroban_increment_contract::{impl#1}::increment",
  overrides = [],
  path_sat = true,
  spec = increment_spec,
  proof = w4
};
