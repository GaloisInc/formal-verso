module Auth where

import Values as Values
import submodule Values::Symbol as Values::Symbol
import submodule Values::AddressObject as Values::AddressObject
import submodule Values::VecObject as Values::VecObject

/*
 * XXX this is all stubbed out for now
 */

type T = Auth

private
   newtype Auth = {
   }

valid : Auth -> Bool
valid auth = True

initial: Auth -> Bool
initial _auth = True

invocation: Values::HostHeap -> Auth -> Values::Symbol::T -> Bool
invocation _heap _auth _contract = True

authorize: {n} fin n =>
   Auth -> Values::AddressObject::T -> [n] Values::Symbol::T -> Auth
authorize auth _addr _nodes = auth

check_noargs: Values::HostHeap -> Auth -> Values::AddressObject::T -> (Auth, Bool)
check_noargs _heap auth _addr = (auth, True)

check_withargs: Values::HostHeap -> Auth -> Values::AddressObject::T -> Values::VecObject::T -> (Auth, Bool)
check_withargs _heap auth _addr _args = (auth, True)

