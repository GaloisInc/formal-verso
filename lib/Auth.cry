module Auth where

import Array

import Values as Values
import submodule Values::Raw as Values::Raw
import submodule Values::Void as Values::Void
import submodule Values::Symbol as Values::Symbol
import submodule Values::AddressObject as Values::AddressObject
import submodule Values::VecObject as Values::VecObject

/*
 * Model for the Soroban SDK authorization system.
 *
 * The basis of the authorization system is a concept of call-graph
 * fragments.
 *
 * As I understand it (note that my understanding is based on a lot of
 * guesswork because the documentation is not very clear, and may be
 * quite wrong so far) this probably works as follows:
 *
 * 1. Each call-graph fragment is associated with a particular
 * Address, and represents a projection of a contract execution call
 * graph where (a) all functions in a given contract are folded
 * together, and (b) contracts that don't make authorization calls
 * about the Address in question are dropped. Chains or subgraphs of
 * dropped nodes are replaced with a single edge. Nodes dropped at the
 * root of the graph are dropped completely.
 *
 * Thus, a fragment (a, f -> g -> h) represents a call chain from f to
 * g to h, where f, g, and h each make an authorization check on
 * address a. This allows f to call g and then g to call h, but does
 * not allow f to call h directly, or allow either g or h to be called
 * spontaneously rather than starting from f. However, other contracts
 * that don't check for authorization from a can be interspersed
 * freely.
 *
 * These fragments are described as trees rather than graphs; it
 * appears that each end corresponds to a single invocation, not a
 * general ability to invoke. So for a situation where f calls g
 * twice, and each call to g calls h, you write a fragment of the
 * form
 *       f --> g -> h
 *         \-> g -> h
 * rather than either the form
 *       f --> g --> h
 *         \-> g -/
 * or just
 *       f -> g -> h
 * but this is not totally clear. It is also not clear if these
 * two fragments are different:
 *       f --> g -> w
 *         \-> g -> z
 * and
 *       f --> g -> z
 *         \-> g -> w
 * that is, whether the sub-nodes are ordered or not.
 *
 * 2. When we start executing we have some collection of call graph
 * fragments that we're allowed to execute; these have been signed
 * by the principal behind the Address associated with the fragment.
 *
 * 3. During execution, when an authorization call happens, we search
 * for a fragment with an unused node matching it that will let us
 * conclude the call is authorized. Then we mark off the node we just
 * matched in the fragment as used. When all the nodes in the fragment
 * have been used, the whole fragment is marked used and/or discarded.
 *
 * 4. It appears that a node in a fragment matches if:
 *    - it names the same contract
 *    - the enclosed arguments list matches (see further notes below)
 *    - and either:
 *         - it is the root of the fragment
 *         - it is the (or a) next unused node in the fragment and its
 *           parent in the fragment is still in the current call chain
 *
 * That is, as you execute you pick fragments that authorize you to
 * execute, and these authorize particular patterns of calls, which
 * then get discharged and marked used one at a time. If/once
 * execution deviates from the pattern the fragment can no longer
 * authorize further calls.
 *
 * As noted above, it's unclear if the patterns of calls are intended
 * to be ordered. Thus, given the example
 *       f --> g -> w
 *         \-> g -> z
 * it's not clear if the sequence
 *    call f, call g, call z, return z, return g, call g, call w, return all
 * is potentially authorized or only the sequence
 *    call f, call g, call w, return z, return g, call g, call w, return all
 * though it is definitely the case that just
 *    call f, call g, call z, return z, return g, return f
 * or
 *    call f, call g, call w, return w, return g, return f
 * are authorized, and
 *    call f, call g, call z, return z, call w
 * is not.
 *
 * It's also unclear if you can have more than one active fragment for
 * the same Address at a time. That is, if you have the two fragments
 *       f -> g -> w
 *       g -> z
 * it's not clear if this sequence is authorized:
 *    call f, call g, call z, return z, return g, call g, call w, return all
 * because it uses the g -> z fragment while the other fragment is
 * partially discharged and then returns to using it. Similarly, it's
 * not clear if the sequence
 *    call f, call g, call z, call g, call w, return z, return w, return all
 * with two live invocations of g at once is supposed to be
 * authorized. From the apparent intent of the system it seems like
 * the first should be authorized but not the second, but it's hard to
 * see how they can readily be distinguished.
 *
 * Finally, if there are multiple possibly matching fragments, it's
 * not clear which you select to match, and contrary to a vague
 * statement in the docs, it does matter. For example, given these
 * two fragments:
 *       f -> g -> w
 *       f -> g -> z
 * which do you pick to start using and mark partially used when a
 * sequence begins with call f? It seems like to satisfy the apparent
 * intent of the system you have to choose both nondeteriminstically
 * and only resolve which one you actually mark used when it becomes
 * unambiguous. (And if you still have multiple potentially used
 * fragments when you're done executing, which do you pick? If they're
 * the same it doesn't matter, and if one's a subgraph of another it's
 * clear you should pick the smaller one, but in general there's no
 * obvious answer.)
 *
 * 5. In addition to the structural matching described above, each
 * node also has a list of values in it, which correspond to the
 * arguments to be passed to the function. These need to be matched at
 * runtime by the arguments given. It isn't clear how these values are
 * supposed to be matched and the documentation is silent, but it
 * appears the intent is just an equality test: the values found at
 * runtime should be the same list as the values found in the fragment.
 *
 * There are two variants of the authorization hypercall, one of which
 * defaults to the argument list from the current invocation, and the
 * other of which takes an explicit argument list. It seems the idea
 * is that the latter can be arbitrary (though related somehow to the
 * current invocation) and the person creating the authorization
 * fragments is supposed to know what'll be posted at runtime so they
 * can include the right list of values in their fragments. This
 * allows e.g. suppressing arguments that are irrelevant to the
 * Address being consulted.
 *
 * Given all the uncertainty above, and given that the more complete
 * model I started out with completely overwhelmed the verification
 * system, I've implemented the following.
 *
 * (Note that because we don't actually support cross-contract calls
 * yet, we can only use this for one contract at a time, so what's
 * here is sufficient for current purposes.)
 *
 * A. We can only have one authorized call-graph fragment.
 *
 * B. That fragment can only have one node in it.
 *
 * C. Call-graph nodes track the function involved and the argument
 * list.
 *
 * D. We can only be matching in one place at one time. That place
 * can be:
 *    - before the single node in the single fragment
 *    - after the single node in the single fragment
 *    - after the single fragment
 *
 * In the first case, if the current call matches, we succeed and
 * advance past the node.
 *
 * In the first case, if the current call doesn't match we assume the
 * fragment's done and move past it.
 *
 * In the second case the fragment is done so we move past it.
 *
 * In the third case we always fail because there's nothing left to
 * match against.
 *
 * E. In principle if we are partway through a fragment and the
 * current contract function returns we should skip over any pieces of
 * the current fragment this renders inaccessible. In this version
 * this does nothing because we can't be partway through a fragment.
 * (XXX: However, there should be an external hook for triggering this
 * case. That doesn't exist yet, because it's not clear what it should
 * look like until we have logic for cross-contract calls.)
 *
 * F. The top-level contract spec should assert the following
 * preconditions:
 *    - that the authorization state is valid (with "valid")
 *    - what the current invocation is (with "invocation"), passing
 *      the current contract function name and current function
 *      argument list
 *    - that the match state is the initial state (with "initial")
 *      (in principle one may start with a partially discharged state,
 *      but there isn't currently direct support for asserting it and
 *      given the current model limitations it isn't very useful)
 * then it should add authorization fragments with "authorize".
 * (Currently this can only be done once for the single fragment
 * supported, and the node list should be a list of a single contract
 * function name and single argument list.) It should then bind the
 * resulting auth object to the contract's pre-state.
 *
 * G. The top-level contract spec should then generate an updated auth
 * model by using one of the authorization functions (corresponding to
 * the authorization call the contract makes) and bind the result to
 * the contract's post-state.
 *
 * H. The saw-script wrapper code in soroban.saw provides wrappers for
 * these operations and ghost-state tracking for the pre-state and
 * post-state, as well as specs for the hypercalls involved.
 *
 * I. Because we don't have contract IDs yet (they are BytesObjects,
 * which we don't have support for) we use the Symbol for the function
 * name as the contract function name. In the long run this should
 * probably be either the contract ID or the contract ID paired with
 * the function name.
 */


////////////////////////////////////////////////////////////
// types

type T = Auth

private
   /*
    * We use the following representation:
    *
    * (1) to represent the authorization fragment:
    *    - the address for the fragment
    *    - the number of nodes in the fragment (fixed to 1)
    *    - the contract function name for the single node
    *    - the number of arguments for the single node
    *    - the argument list for the single node as an array from ArgNum to
    *      Values::Raw::T
    *
    * Because we don't support contract IDs yet, for now use the
    * Symbol for the function name instead.
    *
    * We'll use 8-bit values to count the number of nodes to try to
    * reduce the state space. and keep things from getting out of
    * hand.
    *
    * (2) to represent the matching state:
    *    - whether the fragment is done
    *    - the next node in the fragment to match against
    *      (always either 0 or 1)
    *
    * (3) to represent the currently running invocation:
    *    - the current contract function name (as noted above, a
    *      Symbol for the function name)
    *    - an ArgBundle for the args
    *
    * where an ArgBundle is a pair
    *    (number-of-args, array mapping arg to RawVal)
    *
    * We use these ArgBundles rather than VecObjects to avoid needing
    * to cons up extra VecObjects under the covers, as that would mess
    * up the heap state.
    */

   // types for the array indexes
   type NodeNum = [8]
   type ArgNum = [8]

   // internal representation of an arglist (count and values)
   type ArgBundle = (ArgNum, Array ArgNum Values::Raw::T)

   newtype Auth = {
      // The address and number of nodes for the fragment
      address: Addr,
      numnodes: NodeNum,

      // The contract (actually function name) for the one node
      contract: Values::Symbol::T,

      // The argument list for the one node
      nargs: ArgNum,
      args: Array ArgNum Values::Raw::T,

      // The match state: whether the fragment is done, and if
      // not the next node we're going to use within it.
      fragdone: Bool,
      nextnode: NodeNum,

      // The current invocation state. This may need to grow later.
      invokedcontract: Values::Symbol::T,
      invokedargs: ArgBundle
   }

   // shorten these so the type signatures are readable
   type Heap = Values::HostHeap
   type Addr = Values::AddressObject::T


////////////////////////////////////////////////////////////
// predicates

private
   /*
    * Check that an ArgBundle is valid.
    */
   argbundle_valid: ArgBundle -> Bool
   argbundle_valid (nargs, args) = checkargs nargs
      where
         checkargs i =
            if i == 0 then True
            else arg_valid i && checkargs (i - 1)
         arg_valid i = Values::raw_valid (arrayLookup args i)

   /*
    * Check that two ArgBundles are exactly the same.
    *
    * This version is used for initializing the pre-state, so require
    * pointer equality of the argument values rather than inspecting
    * the heap.
    */
   argbundle_identical: ArgBundle -> ArgBundle -> Bool
   argbundle_identical (nargs1, args1) (nargs2, args2) =
      (nargs1 == nargs2) && (arrayEq args1 args2)

   /*
    * Check that two ArgBundles contain equal values.
    *
    * This version looks in the heap so that large objects are
    * compared by value rather than identity. Check for exact
    * equality first because if true it'll be a lot faster.
    */
   argbundle_eq: ArgBundle -> ArgBundle -> Heap -> Bool
   argbundle_eq (nargs1, args1) (nargs2, args2) heap =
      (nargs1 == nargs2) && (arrayEq args1 args2 || args_eq)
      where
         args_eq = check nargs1
         check i = Values::Raw::eq arg1 arg2 heap
            where
               arg1 = arrayLookup args1 i
               arg2 = arrayLookup args2 i

/*
 * Check that an Auth is valid. Meant for preconditions.
 *
 * For this version, we can have only one node in the fragment. The
 * commented-out code is for having more than one.
 */
valid: Auth -> Bool
valid auth = conditions
   where
      conditions =
         fragment_valid &&
         matchstate_valid &&
         invokedcontract_valid &&
         invokedargs_valid
      //fragment_valid = (auth.numnodes > 0) && addr_valid && nodes_valid
      fragment_valid = (auth.numnodes == 1) && addr_valid && node_valid 0
         where
            addr_valid = Values::AddressObject::valid auth.address
            //nodes_valid = checknodes auth.numnodes
            //checknodes i =
            //   if i == 0 then True
            //   else node_valid i && checknodes (i - 1)
            node_valid node = contract_valid && args_valid
               where
                  //contract = arrayLookup auth.contracts node
                  contract = auth.contract
                  contract_valid = Values::Symbol::valid contract
                  args_valid = argbundle_valid (auth.nargs, auth.args)
      // Note: because fragments aren't allowed to be
      // empty, nextnode == 0 is always valid. However,
      // auth.numnodes is not meaningful if fragdone is
      // true. Don't rely on it.
      matchstate_valid = (nextnode == 0) || (nextnode < auth.numnodes)
         where
            nextnode = auth.nextnode
      invokedcontract_valid =
         Values::Symbol::valid auth.invokedcontract
      invokedargs_valid =
         argbundle_valid auth.invokedargs

/*
 * Check that an Auth is valid _and_ in an initial state:
 * nothing has been consumed yet. Meant for preconditions.
 */
initial: Auth -> Bool
initial auth = valid auth && (auth.fragdone == False) && (auth.nextnode == 0)

/*
 * Check the invocation state of an Auth.
 *
 * Use argbundle_identical because this is actually for initializing
 * the pre-state.
 */
invocation: Heap -> Auth -> Values::Symbol::T -> ArgBundle -> Bool
invocation heap auth sym args = sym_eq && args_eq
   where
      sym_eq = Values::Symbol::eq auth.invokedcontract sym heap
      args_eq = argbundle_identical auth.invokedargs args


////////////////////////////////////////////////////////////
// authorize

/*
 * Convert a VecObject to an ArgBundle.
 */
argbundle_of_vecobj: Values::HostHeap -> Values::VecObject::T -> ArgBundle
argbundle_of_vecobj heap vec = (nargs, args)
   where
      (_ # nargs) = Values::VecObject::len vec heap
      get i = Values::VecObject::get vec (zext i) heap
      empty = arrayConstant (Values::Void::to_raw Values::unit)
      insert arr i = arrayUpdate arr i (get i)
      mkargs i = if i == 0 then empty else insert (mkargs (i - 1)) i
      args = mkargs nargs

/*
 * Convert a list to an ArgBundle.
 */
argbundle_of_list: {n} n < 256 => [n] Values::Raw::T -> ArgBundle
argbundle_of_list vals = zz ! 0
   where
      empty = arrayConstant (Values::Void::to_raw Values::unit)
      zz = [(0, empty)] # [(i + 1, arrayUpdate args' i v)
                              | (i, args') <- zz
                              | v <- vals]

private
   /*
    * Convert a list of nodes to an array for use as the fragment.
    *
    * The default value in the array is the first node. We have to be
    * careful to be consistent about that so that SMT-level equality
    * of arrays is consistent with intended-contents-only equality.
    *
    * For this version that has only one node in the fragment, pluck
    * out the first entry in the argument and use that. The commented
    * out code is for having more than one node.
    */
   makenodes: {n} (0 < n, n < 256) =>
      //[n] (Values::Symbol::T, ArgBundle) -> (NodeNum, Array NodeNum Values::Symbol::T, Array NodeNum ArgNum, Array NodeNum (Array ArgNum Values::Raw::T))
      [n] (Values::Symbol::T, ArgBundle) -> (NodeNum, Values::Symbol::T, ArgNum, Array ArgNum Values::Raw::T)
   makenodes nodes = (1, (nodes ! 0).0, (nodes ! 0).1.0, (nodes ! 0).1.1)
   //makenodes nodes = arrays ! 0
   //   where
   //      [(firstsym, (firstnargs, firstargs))] # rest = nodes
   //      arrays =
   //         [(1, arrayConstant firstsym, arrayConstant firstnargs, arrayConstant firstargs)] #
   //         [(i + 1, arrayUpdate symarray i sym, arrayUpdate nargarray i nargs, arrayUpdate argarray i args)
   //             | (i, symarray, nargarray, argarray) <- arrays
   //             | (sym, (nargs, args)) <- rest]

/*
 * Bind a fragment to an authorization state.
 *
 * Leaves the matching state and invocation state alone, so you can
 * assert about that separately.
 *
 * This version has only one node in the fragment. The commented-out
 * code is for having more than one node.
 */
authorize: {n} (0 < n, n < 256) =>
   Auth -> Addr -> [n] (Values::Symbol::T, ArgBundle) -> Auth
authorize auth addr nodes = auth'
   where
      //(num, contracts, nargs, args) = makenodes nodes
      (num, contract, nargs, args) = makenodes nodes
      auth' = Auth {
         address = addr,
         numnodes = num,
         //contracts = contracts,
         contract = contract,
         nargs = nargs,
         args = args,

         fragdone = auth.fragdone,
         nextnode = auth.nextnode,

         invokedcontract = auth.invokedcontract,
         invokedargs = auth.invokedargs
      }


////////////////////////////////////////////////////////////
// check

private
   /*
    * Update the current node.
    */
   set_nextnode: Auth -> Addr -> NodeNum -> Auth
   set_nextnode auth addr node = auth'
      where
         auth' = Auth {
            address = auth.address,
            numnodes = auth.numnodes,
            //contracts = auth.contracts,
            contract = auth.contract,
            nargs = auth.nargs,
            args = auth.args,

            fragdone = auth.fragdone,
            nextnode = node,

            invokedcontract = auth.invokedcontract,
            invokedargs = auth.invokedargs
         }

   /*
    * Mark the fragment done.
    */
   set_fragdone: Auth -> Bool -> Auth
   set_fragdone auth state = auth'
      where
         auth' = Auth {
            address = auth.address,
            numnodes = auth.numnodes,
            //contracts = auth.contracts,
            contract = auth.contract,
            nargs = auth.nargs,
            args = auth.args,

            fragdone = state,
            nextnode = auth.nextnode,

            invokedcontract = auth.invokedcontract,
            invokedargs = auth.invokedargs
         }

   /*
    * We are done with the fragment. Mark it done, and set nextnode to
    * 0 as if we were going on to another fragment.
    */
   finish_fragment: Auth -> Addr -> Auth
   finish_fragment auth addr = auth''
      where
         auth' = set_fragdone auth True
         auth'' = set_nextnode auth' addr 0

   /*
    * Move to the next node in the fragment. If we run out, mark it
    * done.
    */
   advance_to_next_node: Auth -> Addr -> Auth
   advance_to_next_node auth addr =
      if done then finish_fragment auth addr
      else set_nextnode auth addr nextnode'
      where
         nextnode' = auth.nextnode + 1
         done = nextnode' >= auth.numnodes

   /*
    * Check if the given node of the given fragment matches the
    * contract and argument list presented for authorization (the
    * contract in question is always the current invoked contract)
    *
    * For this version with only one node in the fragment, always
    * use the only node. (The commented out code is for multiple
    * nodes.)
    */
   match_node: Heap -> Auth -> NodeNum -> ArgBundle -> Bool
   match_node heap auth _node argsfound = contract_ok && args_ok
      where
         //contract = arrayLookup auth.contracts node
         contract = auth.contract
         nargs = auth.nargs
         args = auth.args
         contract_ok = Values::Symbol::eq contract auth.invokedcontract heap
         args_ok = argbundle_eq (nargs, args) argsfound heap

   /*
    * Match against the fragment. If it has run out, or if match_node
    * says the next node doesn't match, return false.
    */
   match_fragment: Heap -> Auth -> Addr -> ArgBundle -> Bool
   match_fragment heap auth addr args = (auth.nextnode < auth.numnodes) && matches
      where
         matches = addr_matches && node_matches
         addr_matches = Values::addressobj_eq addr auth.address
         node_matches = match_node heap auth auth.nextnode args

   /*
    * Try matching the fragment. If that works, move to the
    * next node and succeed. If not, finish the fragment, and then
    * fail because there isn't another fragment to try.
    *
    * Return an updated Auth state as well as success/failure.
    */
   check_fragment: Heap -> Auth -> Addr -> ArgBundle -> (Auth, Bool)
   check_fragment heap auth addr args =
      // try the active fragment
      if matches then to_nextnode else retry_nextfrag
      where
         matches = match_fragment heap auth addr args
         // the active fragment matched, advance to its next node
         // and succeed
         to_nextnode = (auth', True)
            where auth' = advance_to_next_node auth addr
         // the active fragment didn't match; drop it
         retry_nextfrag = (auth', False)
            where
               auth' = finish_fragment auth addr

/*
 * Check whether the invoked function and args are authorized. Returns
 * an updated authorization state as well as the success/failure
 * result.
 */
check_noargs: Heap -> Auth -> Addr -> (Auth, Bool)
check_noargs heap auth addr = check_fragment heap auth addr auth.invokedargs

/*
 * Similar but with an explicit arglist.
 */
check_withargs: Heap -> Auth -> Addr -> Values::VecObject::T -> (Auth, Bool)
check_withargs heap auth addr args = check_fragment heap auth addr args'
   where args' = argbundle_of_vecobj heap args
