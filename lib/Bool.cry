module Bool where

import Option as Option
import RawVal as RawVal
import Tag as Tag
import Body as Body

newtype Bool = { raw : RawVal::T }
type T = Bool

raw_true : RawVal::T
raw_true = RawVal::singleton Tag::true

raw_false : RawVal::T
raw_false = RawVal::singleton Tag::false

raw_from_bit : Bit -> RawVal::T
raw_from_bit b = if b then raw_true else raw_false

valid_raw rv = RawVal::shallow_eq rv raw_true
            \/ RawVal::shallow_eq rv raw_false

unsafe_from_raw : RawVal::T -> Bool
unsafe_from_raw rv = Bool { raw = rv }

from_raw : RawVal::T -> Option::T Bool
from_raw rv = Option::mk (valid_raw rv) (unsafe_from_raw rv)

to_raw : Bool -> RawVal::T
to_raw w = w.raw

valid : Bool -> Bit
valid w = valid_raw w.raw

to_bit : Bool -> Bit
to_bit v = RawVal::shallow_eq (to_raw v) raw_true

from_bit : Bit -> Bool
from_bit b = unsafe_from_raw (raw_from_bit b)
