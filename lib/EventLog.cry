module Events where

import Array

import Values as Values
import submodule Values::Raw as Values::Raw
import submodule Values::VecObject as Values::VecObject

type T = EventLog

private
   type Topic = Values::VecObject::T
   type Value = Values::Raw::T
   type Topics = Array Integer Topic
   type Values = Array Integer Value

   newtype EventLog = {
      topics: Topics,
      values: Values,
      count: Integer
   }

add : EventLog -> Values::VecObject::T -> Values::Raw::T -> EventLog
add elog topic val =
   EventLog { topics = topics', values = values', count = count' }
   where
      topics' = arrayUpdate elog.topics elog.count topic
      values' = arrayUpdate elog.values elog.count val
      count' = elog.count + 1

private
   equiv_entry : Topic -> Value -> Topic -> Value -> Values::HostHeap -> Bool
   equiv_entry t1 v1 t2 v2 heap =
      Values::vecobj_eq t1 t2 heap /\ Values::raw_eq v1 v2 heap

   equiv_at : EventLog -> EventLog -> Values::HostHeap -> Integer -> Bool
   equiv_at el1 el2 heap i =
      if equiv_entry t1 v1 t2 v2 heap == False then False
      | i >= el1.count then True
      else equiv_at el1 el2 heap (i + 1)
      where
         t1 = arrayLookup el1.topics i
         v1 = arrayLookup el1.values i
         t2 = arrayLookup el2.topics i
         v2 = arrayLookup el2.values i

equiv : EventLog -> EventLog -> Values::HostHeap -> Bool
equiv el1 el2 heap =
   if el1.count != el2.count then False
   else equiv_at el1 el2 heap 0

