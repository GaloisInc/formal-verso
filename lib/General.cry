module General where

import RawVal as RawVal

import interface TagParam as SmallTag
import interface TagParam as ObjectTag

submodule Small = Tagged { interface SmallTag }
submodule Object = Tagged { interface ObjectTag }

import submodule Small as Small
import submodule Object as Object

import submodule Small::Wrapper as Small::Wrapper
import submodule Object::Wrapper as Object::Wrapper

submodule Wrapper = Wrapper where
  valid_raw rv = RawVal::has_tag SmallTag::tag rv
              \/ RawVal::has_tag ObjectTag::tag rv

import submodule Wrapper as Wrapper

type T = Wrapper::T

from_small : Small::Wrapper::Wrapper -> Wrapper::T
from_small s = Wrapper::unsafe_from_raw (Small::Wrapper::to_raw s)

from_object : Object::Wrapper::Wrapper -> Wrapper::T
from_object o = Wrapper::unsafe_from_raw (Object::Wrapper::to_raw o)
