/*
 * Values stored on the host side.
 *
 * In the Soroban world these values are stored in the VM host and
 * accessed/manipulated with hypercalls. The VM guest uses 32-bit
 * object handles to refer to them.
 *
 * For modeling this, we need (a) a representation of the stored
 * values and also (b) a table that maps object handles to them that
 * we can use to get at these values directly.
 *
 * This file defines both.
 *
 * XXX: for the moment the representation here is rather ad hoc. In
 * the long run it might be better to set it up to match the Soroban
 * host code more closely so it can sometime maybe be used as a basis
 * for verifying that code.
 *
 * Note: if we want to have this and the contract-facing values in
 * separate files, only one can depend on the other. For the moment,
 * the choice is that Values depends on HostValues.  It's definitely
 * possible that this should get restructured once it's clearer what
 * things actually look like after they get built out further. Obvious
 * possibilities are:
 *
 * 1. Values depends on HostValues (current state). Advantages:
 * natural relationship, doesn't mess up the abstraction layer in
 * Values. Disadvantages: we can't refer to Values::Raw from here so
 * the contents of vectors and maps have to be unwrapped, stored here
 * as u64, and rewrapped inside Values, which is ugly.
 *
 * 2. HostValues depends on Values. Advantage: the use of integer
 * handles when Values point to HostValues gives an obvious place to
 * cut the circular dependency. The only thing Values need in them is
 * a u32, and while it might be tidier to be able to call that a
 * HostValues::Handle, that's not really necessary or critical. Then
 * we can refer to raw values (Values::Raw::T) here for e.g. the
 * contents of vectors and maps. Disadvantages: since HostValues is
 * part of the implementation of Values, it should really be
 * underneath it, and this way is backwards.  inversion mentioned
 * above; Also, it means the nicely wrapped-up types in Values, which
 * all have a regularized interface and so forth, can't themselves
 * hide the host value lookups inside them. This messes up the
 * abstractions. It'll be particularly messy for the types that can be
 * either small (non-host) or large (host-stored) values, like U64 and
 * Symbol.
 *
 * 3. Split Values::Raw to its own file. Advantages: the proper way to
 * break the circular dependency, and eliminates the tradeoffs in
 * options 1/2. Disadvantages: creates more things, and exposes many
 * more internal elements.
 *
 * 4. Merge this file into Values. Advantages: eliminates all the other
 * problems. Disadvantage: large and messy.
 *
 * TBD. Watch this space.
 */
module HostValues where

import Array

import Option as Option

/*
 * Interface types. We map Handle to any/all of the representation
 * types (which may include values of type RawRawVal); the state of
 * the mapping is called Heap because it's ultimately an allocation
 * heap. These types are intended to be written qualified, as in
 * HostValues::Handle and HostValues::Heap.
 */
type Handle = [32]
type RawRawVal = [64]
//type T = HostVal
type Heap = HostHeap


////////////////////////////////////////////////////////////
// string representation

/*
 * Because for the moment we don't need to track the actual strings,
 * I'm going to start off with a null/dummy string representation.
 */
type StringRepresentation = ()

string_representation_dummy : StringRepresentation
string_representation_dummy = ()

invalid_string_representation : StringRepresentation
invalid_string_representation = ()


////////////////////////////////////////////////////////////
// vector representation

/*
 * Vectors map 32-bit indexes to 64-bit unwrapped raw values.
 * Values.cry rewraps those values as needed.
 *
 * XXX we should come up with some shorter names here
 */
type VecData = Array [32] RawRawVal
newtype VecRepresentation = {
   data: VecData,
   size: [32]
}

/* Empty vector */
vec_representation_empty : VecRepresentation
vec_representation_empty = VecRepresentation { data = arrayConstant 0, size = 0 }

/* Singleton vector */
vec_representation_singleton : RawRawVal -> VecRepresentation
vec_representation_singleton n = VecRepresentation { data = arrayConstant n, size = 1 }

/* Pair */
vec_representation_pair : RawRawVal -> RawRawVal -> VecRepresentation
vec_representation_pair n m =
   VecRepresentation { data = arr, size = 2 }
   where arr = arrayUpdate (arrayConstant m) (0 : [32]) n

/* Triple */
vec_representation_triple : RawRawVal -> RawRawVal -> RawRawVal -> VecRepresentation
vec_representation_triple n m o =
   VecRepresentation { data = arr, size = 3 }
   where arr = arrayUpdate (arrayUpdate (arrayConstant o) 0 n) 1 m

/* Quad */
vec_representation_quad : RawRawVal -> RawRawVal -> RawRawVal -> RawRawVal -> VecRepresentation
vec_representation_quad n m o p =
   VecRepresentation { data = arr, size = 4 }
   where arr = arrayUpdate (arrayUpdate (arrayUpdate (arrayConstant p) 0 n) 1 m) 2 o

/* Quint */
vec_representation_quint : RawRawVal -> RawRawVal -> RawRawVal -> RawRawVal -> RawRawVal -> VecRepresentation
vec_representation_quint n m o p q =
   VecRepresentation { data = arr, size = 5 }
   where arr = arrayUpdate (arrayUpdate (arrayUpdate (arrayUpdate (arrayConstant q) 0 n) 1 m) 2 o) 3 p

/* N copies of V */
vec_representation_n: [32] -> RawRawVal -> VecRepresentation
vec_representation_n n v =
   VecRepresentation { data = arr, size = n }
   where arr = arrayConstant v

/* take the sequence seq */
vec_representation_seq: {n} n <= 0xffffffff => [n] RawRawVal -> VecRepresentation
vec_representation_seq seq =
   VecRepresentation { data = arr, size = `n }
   where arr = arrayRangeUpdate (arrayConstant 0) 0 seq

/* Vector used when an invalid/error version is needed */
invalid_vec_representation : VecRepresentation
invalid_vec_representation = vec_representation_empty

/* get nth value, or return default value if out of range */
vec_representation_get_default : VecRepresentation -> [32] -> RawRawVal -> RawRawVal
vec_representation_get_default rep n dfl =
   if n < rep.size then arrayLookup rep.data n else dfl

/* test contents for equivalence */
private
   vec_representation_equiv_at :
          (RawRawVal -> RawRawVal -> Heap -> Bool) ->
          VecRepresentation -> VecRepresentation -> Heap ->
          [32] ->
          Bool
   vec_representation_equiv_at subcmp rep1 rep2 heap i =
      if subcmp x1 x2 heap == False then False
      | i >= rep1.size then True
      else vec_representation_equiv_at subcmp rep1 rep2 heap (i + 1)
      where
         x1 = arrayLookup rep1.data i
         x2 = arrayLookup rep2.data i

vec_representation_equiv :
       (RawRawVal -> RawRawVal -> Heap -> Bool) ->
       VecRepresentation -> VecRepresentation -> Heap ->
       Bool
vec_representation_equiv subcmp rep1 rep2 heap =
   if rep1.size != rep2.size then False
   else vec_representation_equiv_at subcmp rep1 rep2 heap 0

/* updates */
vec_representation_addtail : VecRepresentation -> RawRawVal -> VecRepresentation
vec_representation_addtail rep v =
   VecRepresentation { data = data', size = size' }
   where
      data' = arrayUpdate rep.data rep.size v
      size' = rep.size + 1


////////////////////////////////////////////////////////////
// map representation

/*
 * Maps map 64-bit unwrapped raw keys to 64-bit unwrapped raw values.
 * Values.cry rewraps those values as needed.
 */

type MapHere = Array RawRawVal Bool
type MapData = Array RawRawVal RawRawVal
newtype MapRepresentation = {
   here: MapHere,
   data: MapData
}

map_representation_empty: MapRepresentation
map_representation_empty =
   MapRepresentation { here = arrayConstant False, data = arrayConstant 0 }

map_representation_add: RawRawVal -> RawRawVal -> MapRepresentation -> MapRepresentation
map_representation_add k v rep =
   MapRepresentation { here = here', data = data' }
   where
      here' = arrayUpdate rep.here k True
      data' = arrayUpdate rep.data k v

/* Singleton */
map_representation_singleton: RawRawVal -> RawRawVal -> MapRepresentation
map_representation_singleton k v =
   map_representation_add k v map_representation_empty

/* Pair */
map_representation_pair: RawRawVal -> RawRawVal -> RawRawVal -> RawRawVal -> MapRepresentation
map_representation_pair k1 v1 k2 v2 =
   map_representation_add k2 v2 (map_representation_singleton k1 v1)

/* Map used when an invalid/error version is needed */
invalid_map_representation : MapRepresentation
invalid_map_representation = map_representation_empty

/* check if k is present */
map_representation_has_key : RawRawVal -> MapRepresentation -> Bool
map_representation_has_key k rep =
   arrayLookup rep.here k

/* get value for k, or return default value if not present */
map_representation_get_default : RawRawVal -> MapRepresentation -> RawRawVal -> RawRawVal
map_representation_get_default k rep dfl =
   if arrayLookup rep.here k == False then dfl
   else arrayLookup rep.data k

/* test contents for equivalence */
map_representation_equiv :
       (RawRawVal -> RawRawVal -> Heap -> Bool) ->
       MapRepresentation -> MapRepresentation -> Heap ->
       Bool
map_representation_equiv _subcmp _rep1 _rep2 _heap =
   // XXX notyet
   error "map_representation_equiv: not yet implemented"


////////////////////////////////////////////////////////////
// heap

private
   /*
    * The supported types of host-side values are:
    *    - 64-bit, 128-bit, and 256-bit signed and unsigned integers
    *    - timepoints
    *    - durations
    *    - bytes (essentially arrays of u8)
    *    - strings
    *    - symbols (restricted strings)
    *    - vectors
    *    - maps
    *    - addresses
    *
    * of which we currently only provide u64, string, and vector.
    *
    * It would be better not to need HostInvalid but until we have
    * a better Option.cry we need a value to stuff in failures.
    */
/* apparently we can't have this at all, even if SAW never sees it
   enum HostVal =
        HostInvalid
      | HostU64 [64]
      | HostVec VecRepresentation
*/
   type TypeTag = [2]
   TagU64 = 0
   TagString = 1
   TagVec = 2
   TagMap = 3

   newtype HostHeap = {
      //values: Array Handle HostVal,
      types: Array Handle TypeTag,
      values_u64: Array Handle [64],
      values_string: Array Handle StringRepresentation,
      // Can't do this (saw-script #1988)
      //values_vec: Array Handle VecRepresentation,
      // Instead make a pair of arrays
      values_vecdata: Array Handle VecData,
      values_vecsize: Array Handle [32],
      values_maphere: Array Handle MapHere,
      values_mapdata: Array Handle MapData,
      next: Handle
   }


/*
 * Assert that the heap can allocate at least as many more objects as
 * "headroom". If adding in headroom makes the value smaller, the
 * value overflowed.
 */
heap_has_space : Heap -> [32] -> Bool
heap_has_space h headroom = h.next + headroom >= h.next

empty_heap : Heap
empty_heap =
   HostHeap {
      types = arrayConstant 0,
      values_u64 = arrayConstant 0,
      values_string = arrayConstant string_representation_dummy,
      values_vecdata = arrayConstant (arrayConstant 0),
      values_vecsize = arrayConstant 0,
      values_maphere = arrayConstant (arrayConstant False),
      values_mapdata = arrayConstant (arrayConstant 0),
      next = 0
   }

/* this also doesn't work
   /*
    * Allocate a value and store it in the state.
    */
   alloc : HostVal -> Heap -> (Heap, Handle)
   alloc v s = (s', handle)
      where
         handle = s.next
         values' = arrayUpdate s.values handle v
         s' = HostHeap { values = values', next = s.next + 1 }

   /*
    * Look up a value. Out of range handles produce None.
    */
   lookup : Handle -> Heap -> Option::T HostVal
   lookup h s =
      if h < s.next then Option::some (arrayLookup s.values h)
      else Option::none' HostInvalid
*/

/*
 * Typed allocate wrappers
 */

alloc_u64 : [64] -> Heap -> (Heap, Handle)
//alloc_u64 n s = alloc (HostU64 n) s
alloc_u64 n s = (s', handle)
   where
      handle = s.next
      types' = arrayUpdate s.types handle TagU64
      values_u64' = arrayUpdate s.values_u64 handle n
      s' = HostHeap {
         types = types',
         values_u64 = values_u64',
         values_string = s.values_string,
         values_vecdata = s.values_vecdata,
         values_vecsize = s.values_vecsize,
         values_maphere = s.values_maphere,
         values_mapdata = s.values_mapdata,
         next = s.next + 1
      }

alloc_string : StringRepresentation -> Heap -> (Heap, Handle)
//alloc_string rep s = alloc (HostString rep) s
alloc_string rep s = (s', handle)
   where
      handle = s.next
      types' = arrayUpdate s.types handle TagString
      values_string' = arrayUpdate s.values_string handle rep
      s' = HostHeap {
         types = types',
         values_u64 = s.values_u64,
         values_string = values_string',
         values_vecdata = s.values_vecdata,
         values_vecsize = s.values_vecsize,
         values_maphere = s.values_maphere,
         values_mapdata = s.values_mapdata,
         next = s.next + 1
      }

alloc_vec : VecRepresentation -> Heap -> (Heap, Handle)
//alloc_vec rep s = alloc (HostVec rep) s
alloc_vec rep s = (s', handle)
   where
      handle = s.next
      types' = arrayUpdate s.types handle TagVec
      //values_vec' = arrayUpdate s.values_vec handle rep
      values_vecdata' = arrayUpdate s.values_vecdata handle rep.data
      values_vecsize' = arrayUpdate s.values_vecsize handle rep.size
      s' = HostHeap {
         types = types',
         values_u64 = s.values_u64,
         values_string = s.values_string,
         values_vecdata = values_vecdata',
         values_vecsize = values_vecsize',
         values_maphere = s.values_maphere,
         values_mapdata = s.values_mapdata,
         next = s.next + 1
      }

alloc_map : MapRepresentation -> Heap -> (Heap, Handle)
//alloc_map rep s = alloc (HostMap rep) s
alloc_map rep s = (s', handle)
   where
      handle = s.next
      types' = arrayUpdate s.types handle TagMap
      values_maphere' = arrayUpdate s.values_maphere handle rep.here
      values_mapdata' = arrayUpdate s.values_mapdata handle rep.data
      s' = HostHeap {
         types = types',
         values_u64 = s.values_u64,
         values_string = s.values_string,
         values_vecdata = s.values_vecdata,
         values_vecsize = s.values_vecsize,
         values_maphere = values_maphere',
         values_mapdata = values_mapdata',
         next = s.next + 1
      }

/*
 * Typed lookup wrappers
 */

present_as_u64 : Handle -> Heap -> Bool
present_as_u64 h s =
   if h >= s.next then False
   | arrayLookup s.types h != TagU64 then False
   else True

present_as_string : Handle -> Heap -> Bool
present_as_string h s =
   if h >= s.next then False
   | arrayLookup s.types h != TagString then False
   else True

present_as_vec : Handle -> Heap -> Bool
present_as_vec h s =
   if h >= s.next then False
   | arrayLookup s.types h != TagVec then False
   else True

present_as_map : Handle -> Heap -> Bool
present_as_map h s =
   if h >= s.next then False
   | arrayLookup s.types h != TagMap then False
   else True

lookup_u64 : Handle -> Heap -> Option::T [64]
lookup_u64 h s =
//   /* ugh we really need a better Option */
//   case Option::unwrap_or (lookup h s) HostInvalid of
//      HostU64 n -> Option::some n
//      _ -> Option::none' 0
   if h >= s.next then Option::none' 0
   | arrayLookup s.types h != TagU64 then Option::none' 0
   else Option::some (arrayLookup s.values_u64 h)

lookup_string : Handle -> Heap -> Option::T StringRepresentation
lookup_string h s =
//   /* ugh we really need a better Option */
//   case Option::unwrap_or (lookup h s) HostInvalid of
//      HostString n -> Option::some n
//      _ -> Option::none' 0
   if h >= s.next then Option::none' invalid_string_representation
   | arrayLookup s.types h != TagString then Option::none' invalid_string_representation
   else Option::some (arrayLookup s.values_string h)

lookup_vec : Handle -> Heap -> Option::T VecRepresentation
lookup_vec h s =
//   /* ugh we really need a better Option */
//   case Option::unwrap_or (lookup h s) HostInvalid of
//      HostVec rep -> Option::some rep
//      _ -> Option::none' invalid_vec_representation
   if h >= s.next then Option::none' invalid_vec_representation
   | arrayLookup s.types h != TagVec then Option::none' invalid_vec_representation
   else
      Option::some rep
      where
         data = arrayLookup s.values_vecdata h
         size = arrayLookup s.values_vecsize h
         //rep = arrayLookup s.values_vec h
         rep = VecRepresentation { data = data, size = size }

lookup_map : Handle -> Heap -> Option::T MapRepresentation
lookup_map h s =
//   /* ugh we really need a better Option */
//   case Option::unwrap_or (lookup h s) HostInvalid of
//      HostMap rep -> Option::some rep
//      _ -> Option::none' invalid_map_representation
   if h >= s.next then Option::none' invalid_map_representation
   | arrayLookup s.types h != TagMap then Option::none' invalid_map_representation
   else
      Option::some rep
      where
         here = arrayLookup s.values_maphere h
         data = arrayLookup s.values_mapdata h
         rep = MapRepresentation { here = here, data = data }
