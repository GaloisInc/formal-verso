module Option where

type T a = Option a

type Option a =
  { is_ok : Bit
  , value : a
  }

/*
 * XXX: is this supposed to be "option" or "result"?
 *
 * Rust's "option" is None or Some (like ocaml's) and "result" is Ok
 * or Err, but... we are not in a position to be able to store an
 * error value given the above definition, so it shouldn't really be
 * "result".
 *
 * I'm going to add "some" and "none" functions as a stopgap for more
 * clarity until I get a chance to clean it up.
 *
 * Also, it appears this type (as opposed to the other option
 * surrogate in Storage.cry) are never exported into SAW, so there's
 * no clear reason we can't use Cryptol's own Option. XXX...
 *
 * Update: for now at least, add "none'" that takes a dummy value to
 * store in the value part, since we need to put something there and
 * we can't actually use zero because there's currently no way to
 * derive (or explicitly instantiate) the Zero typeclass for the
 * newtypes we're using.
 */

ok : {a} a -> Option a
ok x = mk True x


some : {a} a -> Option a
some x = mk True x

none : {a} Zero a => Option a
none = mk False zero

none' : {a} a -> Option a
none' z = mk False z


mk : {a} Bit -> a -> Option a
mk valid value = { is_ok = valid, value = value }

is_ok : {a} Option a -> Bit
is_ok o = o.is_ok

is_some : {a} Option a -> Bit
is_some o = o.is_ok

unsafe_unwrap : {a} Option a -> a
unsafe_unwrap o = o.value

crashing_unwrap : {a} Option a -> a
crashing_unwrap o = if o.is_ok then o.value else error "Option::crashing_unwrap"

unwrap_or : {a} Option a -> a -> a
unwrap_or o def = if o.is_ok then o.value else def

ok_implies : {a} (a -> Bit) -> Option a -> Bit
ok_implies p o = if o.is_ok then p o.value else True

ok_and : {a} (a -> Bit) -> Option a -> Bit
ok_and p o = if o.is_ok then p o.value else False

fmap : {a, b} Option a -> (a -> b) -> Option b
fmap o f =
  { is_ok = o.is_ok
  , value = f o.value
  }
