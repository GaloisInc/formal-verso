module Option where

type T a = Option a

type Option a =
  { is_ok : Bit
  , value : a
  }

ok : {a} a -> Option a
ok x = mk True x

mk : {a} Bit -> a -> Option a
mk valid value = { is_ok = valid, value = value }

is_ok : {a} Option a -> Bit
is_ok o = o.is_ok

unsafe_unwrap : {a} Option a -> a
unsafe_unwrap o = o.value

unwrap_or : {a} Option a -> a -> a
unwrap_or o def = if o.is_ok then o.value else def

ok_implies : {a} (a -> Bit) -> Option a -> Bit
ok_implies p o = if o.is_ok then p o.value else True

ok_and : {a} (a -> Bit) -> Option a -> Bit
ok_and p o = if o.is_ok then p o.value else False

fmap : {a, b} (Zero b) => Option a -> (a -> b) -> Option b
fmap o f =
  { is_ok = o.is_ok
  , value = f o.value
  }
