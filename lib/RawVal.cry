module RawVal where

import Body as Body
import Tag as Tag

type Payload = [64]

type T = RawVal

newtype RawVal = { payload : Payload }

has_tag : Tag::T -> RawVal -> Bit
has_tag t rv = get_tag rv == t

from_symbol_small : Body::T -> RawVal
from_symbol_small body = from_body_and_tag body Tag::symbol_small

from_body_and_tag : Body::T -> Tag::T -> RawVal
from_body_and_tag body tag = RawVal { payload = body # tag }

from_major_minor_and_tag : Body::Major -> Body::Minor -> Tag::T -> RawVal
from_major_minor_and_tag major minor =
  from_body_and_tag (Body::from_major_minor major minor)

get_tag : RawVal -> Tag::T
get_tag rv = drop rv.payload

get_body : RawVal -> Body::T
get_body rv = take rv.payload

get_major : RawVal -> Body::Major
get_major rv = Body::get_major (get_body rv)

get_minor : RawVal -> Body::Minor
get_minor rv = Body::get_minor (get_body rv)
