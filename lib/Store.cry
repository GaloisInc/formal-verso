module Storage where

import Array
import Option as Option
import Values as Values
import submodule Values::Raw as Raw

type T = Storage

private
  newtype Storage = { array : Array Raw::T OptionRawVal }
  // Can't use Option Raw::T due to saw-script#1988
  // first bit = exists, rest = data
  type OptionRawVal = [65]

has : Storage -> Raw::T -> Bit
has s k = Option::is_ok (get s k)

get : Storage -> Raw::T -> Option::T Raw::T
get s k =
   Option::mk (head orv) (Raw::from_payload (tail orv))
   where orv = arrayLookup s.array k

set : Storage -> Raw::T -> Raw::T -> Storage
set s k v =
   Storage { array = arrayUpdate s.array k (0b1 # payload) }
   where payload = Raw::get_payload v
