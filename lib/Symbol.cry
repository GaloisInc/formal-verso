module Symbol where

import Option
import RawVal (RawVal)
import submodule RawVal::Tag as RawVal::Tag
import RawVal as RawVal

type Symbol = SymbolImpl

private
  newtype SymbolImpl = { raw : RawVal }

short : {n} (n <= 9) => String n -> Symbol
short s = SymbolImpl
  { raw = RawVal::from_symbol_small (zext (join (map encode_char s))) }

is_symbol : RawVal -> Bit
is_symbol rv =
  RawVal::has_tag RawVal::Tag::symbol_small rv
  \/ RawVal::has_tag RawVal::Tag::symbol_object rv

from_raw_val : RawVal -> Option Symbol
from_raw_val rv = { exists = is_symbol rv, value = SymbolImpl { raw = rv } }

private

  encode_char : Char -> [6]
  encode_char ch =
    if ch == '_' then 1
    | elem ch ['0'..'9'] then 2 + drop (ch - '0')
    | elem ch ['A'..'Z'] then 12 + drop (ch - 'A')
    | elem ch ['a'..'z'] then 38 + drop (ch - 'a')
    else error
      ("symbol bad char: encountered " # [ch]
       # ", supported range [a-zA-Z0-9_]")
