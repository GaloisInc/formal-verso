module Symbol where

import Option as Option
import RawVal as RawVal
import Tag as Tag
import Body as Body

small_tag : Tag::T
small_tag = Tag::symbol_small

object_tag : Tag::T
object_tag = Tag::symbol_object

submodule General where

   submodule Small where
      type T = Small
      newtype Small = { raw : RawVal::T }

      to_raw : Small -> RawVal::T
      to_raw w = w.raw

      unsafe_from_raw : RawVal::T -> Small
      unsafe_from_raw rv = Small { raw = rv }

      from_body : Body::T -> Small
      from_body body = unsafe_from_raw (RawVal::from_body_and_tag body small_tag)
   // end of Small

   submodule Object where
      type T = Object
      newtype Object = { raw : RawVal::T }
   // end of Object

   submodule Wrapper where
      valid_raw : RawVal::T -> Bit
      valid_raw rv = RawVal::has_tag small_tag rv
                  \/ RawVal::has_tag object_tag rv

      type T = Wrapper
      newtype Wrapper = { raw : RawVal::T }

      from_raw : RawVal::T -> Option::T Wrapper
      from_raw rv = Option::mk (valid_raw rv) (unsafe_from_raw rv)

      unsafe_from_raw : RawVal::T -> Wrapper
      unsafe_from_raw rv = Wrapper { raw = rv }

      valid : Wrapper -> Bit
      valid w = valid_raw w.raw

   from_small : Small::Small -> Wrapper::T
   from_small s = Wrapper::unsafe_from_raw (Small::to_raw s)

import submodule General::Small as General::Small
import submodule General::Object as General::Object
import submodule General::Wrapper as Wrapper

type SmallT = General::Small::T
type ObjectT = General::Object::T

small_from_string : {n} (n <= 9) => String n -> SmallT
small_from_string s = General::Small::from_body (zext (join (map encode_char s)))

encode_char : Char -> [6]
encode_char ch =
  if ch == '_' then 1
  | elem ch ['0'..'9'] then 2 + drop (ch - '0')
  | elem ch ['A'..'Z'] then 12 + drop (ch - 'A')
  | elem ch ['a'..'z'] then 38 + drop (ch - 'a')
  else error
    ("symbol bad char: encountered " # [ch]
      # ", supported range [a-zA-Z0-9_]")

type T = Symbol

type Symbol = Wrapper::T

short : {n} (n <= 9) => String n -> Symbol
short s = General::from_small (small_from_string s)

from_raw = Wrapper::from_raw
valid = Wrapper::valid
