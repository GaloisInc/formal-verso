module Symbol::Small where

import Symbol::General as General

import submodule General::Small as Small

type T = Small

type Small = Small::T

from_string : {n} (n <= 9) => String n -> Small
from_string s = Small::from_body (zext (join (map encode_char s)))

encode_char : Char -> [6]
encode_char ch =
  if ch == '_' then 1
  | elem ch ['0'..'9'] then 2 + drop (ch - '0')
  | elem ch ['A'..'Z'] then 12 + drop (ch - 'A')
  | elem ch ['a'..'z'] then 38 + drop (ch - 'a')
  else error
    ("symbol bad char: encountered " # [ch]
      # ", supported range [a-zA-Z0-9_]")
