/*
 * Soroban SDK values.
 *
 * This is intentionally supposed to have the same bit encoding as the
 * Soroban SDK. See src/val.rs in soroban-env-common, plus also a few
 * other modules like num.rs.
 *
 * Values are a tagged union stored in a 64-bit machine integer, where
 * the lower 8 bits are used as a type tag. The remaining 56 bits are
 * (in some cases) divided into a 32-bit major part and 24-bit minor
 * part. The major part is the upper half of the full 64-bit value.
 * That is:
 *      63       32  31        8  7       0
 *     |-- major --||-- minor --||-- tag --|
 *
 * The type Val is this type-tagged representation of any Soroban
 * value.
 *
 * The following types are wrappers around it theoretically restricted
 * to the values corresponding to their type, as in the Rust code:
 *    Void::T
 *    Bool::T
 *    U32::T
 *     :
 *
 * The layout of this module is intended to mirror val.rs, though it's
 * difficult to do exactly.
 *
 * Also, my intent is to not let the type tags escape from this module,
 * which is somewhat in conflict with the desire to match val.rs.
 *
 * Note: i'm using math ints for bit sizes and widths, not because
 * they need to be unbounded, but in the hopes that accidentally
 * mixing sizes with values or pieces of values will reliably lead to
 * type errors.
 */

module Values where

import Option as Option

////////////////////////////////////////////////////////////
// fields
// val.rs lines 20-41

// Sizes
private
   type WORD_BITS  = 64
   type TAG_BITS   =  8
   type BODY_BITS  = 56
   type MAJOR_BITS = 32
   type MINOR_BITS = 24

// trivial but worth stating and crosschecking
property BODY_TAG_WORD_BITS    = `BODY_BITS  + `TAG_BITS   == `WORD_BITS
property MAJOR_MINOR_BODY_BITS = `MAJOR_BITS + `MINOR_BITS == `BODY_BITS
// apparently you can't do this except by loading the file and running
// :prove from the repl :-(
//prove MAJOR_MINOR_BODY_BITS
//prove BODY_TAG_WORD_BITS

// Masks
//
// In keeping with tag.rs we'll use FOO_MASK to mean a right-aligned
// mask of the proper size; the intended usage for extracting a field
// is apparently
//    (val >> shift-amount) && FOO_MASK
// but val.rs doesn't seem to define constants for the shift amounts.
//
// We'll also define FOO_SHIFT as the shift amounts.
//

private
   mask_of_width : Integer -> [64]
   mask_of_width w = (1 << w) - 1

   TAG_MASK   = mask_of_width `TAG_BITS
   BODY_MASK  = mask_of_width `BODY_BITS
   MAJOR_MASK = mask_of_width `MAJOR_BITS
   MINOR_MASK = mask_of_width `MINOR_BITS

   TAG_SHIFT   = 0 : Integer
   BODY_SHIFT  = `TAG_BITS
   MAJOR_SHIFT = `MINOR_BITS + `TAG_BITS
   MINOR_SHIFT = `TAG_BITS

// check these came out as expected
property TAG_MASK_BITS   = TAG_MASK   == 0x00000000000000ff
property BODY_MASK_BITS  = BODY_MASK  == 0x00ffffffffffffff
property MAJOR_MASK_BITS = MAJOR_MASK == 0x00000000ffffffff
property MINOR_MASK_BITS = MINOR_MASK == 0x0000000000ffffff
property TAG_MASK_SHIFTED   = (TAG_MASK << TAG_SHIFT)     == 0x00000000000000ff
property BODY_MASK_SHIFTED  = (BODY_MASK << BODY_SHIFT)   == 0xffffffffffffff00
property MAJOR_MASK_SHIFTED = (MAJOR_MASK << MAJOR_SHIFT) == 0xffffffff00000000
property MINOR_MASK_SHIFTED = (MINOR_MASK << MINOR_SHIFT) == 0x00000000ffffff00
//prove TAG_MASK_BITS
//prove BODY_MASK_BITS
//prove MAJOR_MASK_BITS
//prove MINOR_MASK_BITS
//prove TAG_MASK_SHIFTED
//prove BODY_MASK_SHIFTED
//prove MAJOR_MASK_SHIFTED
//prove MINOR_MASK_SHIFTED


////////////////////////////////////////////////////////////
// type tags
// val.rs 42-157

private
   type Tag = [TAG_BITS]

/*
 * These magic numbers are the ones used in val.rs.
 *
 * Commented-out ones are those we don't use yet.
 */

private
   tag_false = 0 : Tag
   tag_true = 1 : Tag
   tag_void = 2 : Tag
   //tag_error = 3 : Tag
   tag_u32val = 4 : Tag
   tag_i32val = 5 : Tag
   //tag_u64small = 6 : Tag
   //tag_i64small = 7 : Tag
   //tag_timepointsmall = 8 : Tag
   //tag_durationsmall = 9 : Tag
   //tag_u128small = 10 : Tag
   //tag_i128small = 11 : Tag
   //tag_u256small = 12 : Tag
   //tag_i256small = 13 : Tag
   tag_symbolsmall = 14 : Tag

   // upper bound of "small" types and lower bound of "object" types
   // (these are called "code" rather than "tag" in the sdk source;
   // for now at least I'm proceeding on the assumption that the lack
   // of correspondence between here and there is less important than
   // consistency of naming here)
   small_tag_upper_bound = 15 : Tag
   object_tag_lower_bound = 63 : Tag

   //tag_u64object = 64 : Tag
   //tag_i64object = 65 : Tag
   //tag_timepointobject = 66 : Tag
   //tag_durationobject = 67 : Tag
   //tag_u128object = 68 : Tag
   //tag_i128object = 69 : Tag
   //tag_u256object = 70 : Tag
   //tag_i256object = 71 : Tag
   //tag_bytesobject = 72 : Tag
   //tag_stringobject = 73 : Tag
   tag_symbolobject = 74 : Tag
   //tag_vecobject = 75 : Tag
   tag_mapobject = 76 : Tag
   //tag_addressobject = 77 : Tag

   // correspondingly, upper bound of "object" types
   object_tag_upper_bound = 78 : Tag

   // tag for invalid values
   badtag = 0x7f : Tag

//
// checks on type tags
//

// val.rs lines 170-178
private
   tag_is_object : Tag -> Bool
   tag_is_object x =
      (x > object_tag_lower_bound) && (x < object_tag_upper_bound)


////////////////////////////////////////////////////////////
// small symbol encoding

/*
 * There are 63 valid symbol chars (0-9, A-Z, a-z, and _) so
 * we can pack up to 9 of them in 54 bits of the 56-bit body
 * field. Soroban does this in order to avoid having to materialize
 * object-style strings in the common case, and we follow along
 * because we're trying to use the same representations.
 */

// symbol.rs lines 99-105
private
   type MAX_SMALL_CHARS = 9
   type CODE_BITS = 6
   CODE_MASK = mask_of_width `CODE_BITS
   // size and mask for the whole encoded string (goes in the body field)
   type SMALLSYM_BITS = MAX_SMALL_CHARS * CODE_BITS
   SMALLSYM_MASK = mask_of_width `SMALLSYM_BITS

property SMALLSYM_BODY_BITS = `SMALLSYM_BITS + 2 == `BODY_BITS
property CODE_MASK_BITS     = CODE_MASK     == 0x000000000000003f
property SMALLSYM_MASK_BITS = SMALLSYM_MASK == 0x003fffffffffffff
//prove CODE_MASK_BITS
//prove SMALLSYM_MASK_BITS

// symbol.rs lines 156-164 (plus at least one other place I can't find now)
private
   smallsym_body_valid : [BODY_BITS] -> Bool
   smallsym_body_valid body = zext body == (zext body && SMALLSYM_MASK)

// symbol.rs lines 229-238 (where it's "encode_byte")
private
   smallsym_encode : Char -> [CODE_BITS]
   smallsym_encode ch =
      if ch == '_' then 1
      | elem ch ['0'..'9'] then 2 + drop (ch - '0')
      | elem ch ['A'..'Z'] then 12 + drop (ch - 'A')
      | elem ch ['a'..'z'] then 38 + drop (ch - 'a')
      else error
         ("symbol bad char: encountered " # [ch]
           # ", supported range [a-zA-Z0-9_]")

   smallsym_decode : [CODE_BITS] -> Char
   smallsym_decode code =
      if code == 1 then '_'
      | elem code [2 .. 2+9] then '0' + zext (code - 2)
      | elem code [12 .. 12+25] then 'A' + zext (code - 12)
      | elem code [38 .. 38+25] then 'a' + zext (code - 38)
      | code == 0 then 0 /* XXX undesirable */
      else error "false"

// symbol.rs lines 240-256 (where it's "try_from_bytes")
//
// XXX I'm not sure either of these handles the characters in the same
// order as the rust code.
//
// XXX currently you have to know how many characters are in the
// decoded string. This is not optimal.
private
   smallsym_body_of_string : {n} (n <= MAX_SMALL_CHARS) => String n -> [56]
   smallsym_body_of_string s = zext (join (map smallsym_encode s))

   smallsym_string_of_body : {n} (n <= MAX_SMALL_CHARS) => [56] -> String n
   smallsym_string_of_body bits =
      take`{n} ((map smallsym_decode (split`{9} bits')) : String 9)
      where
         bits' = drop bits : [SMALLSYM_BITS]


////////////////////////////////////////////////////////////
// values

// XXX can't make it private; using an accessor function in
// to_mir_value in soroban.saw breaks SAW.
//private
newtype Val = { bits: [WORD_BITS] }

//
// You can't (yet) derive typeclass instances for newtypes, so until
// then we need this (and to use it explicitly where it would be nicer
// to write "==")
private
   val_eq : Val -> Val -> Bool
   val_eq v1 v2 = v1.bits == v2.bits

/*
 * I am not transcribing the assorted Rust type widgetry since
 * it mostly doesn't make sense in Cryptol.
 */

/*
 * Field extraction functions
 * (these don't neatly correspond to anything in the rust code)
 */

private
   body_of_val : Val -> [BODY_BITS]
   body_of_val v = drop ((v.bits >> BODY_SHIFT) && BODY_MASK)

   tag_of_val : Val -> Tag
   tag_of_val v = drop ((v.bits >> TAG_SHIFT) && TAG_MASK)

   major_of_val : Val -> [MAJOR_BITS]
   major_of_val v = drop ((v.bits >> MAJOR_SHIFT) && MAJOR_MASK)

   minor_of_val : Val -> [MINOR_BITS]
   minor_of_val v = drop ((v.bits >> MINOR_SHIFT) && MINOR_MASK)

/*
 * Construction functions
 * (likewise)
 */
private
   val_of_body_tag : [56] -> Tag -> Val
   val_of_body_tag body tag =
      Val { bits = (body' || tag') }
      where
         body' = zext`{64} body << BODY_SHIFT
         tag' = zext`{64} tag << TAG_SHIFT

   val_of_major_minor_tag : [32] -> [24] -> Tag -> Val
   val_of_major_minor_tag major minor tag =
      Val { bits = (major' || minor' || tag') }
      where
         major' = zext`{64} major << MAJOR_SHIFT
         minor' = zext`{64} minor << MINOR_SHIFT
         tag' = zext`{64} tag << TAG_SHIFT

/*
 * Constructors and constants
 */

private
   badval = val_of_body_tag 0 badtag

   val_unit = val_of_body_tag 0 tag_void
   val_true = val_of_body_tag 0 tag_true
   val_false = val_of_body_tag 0 tag_false

   encode_symbolsmall s =
      val_of_body_tag (smallsym_body_of_string s) tag_symbolsmall
   decode_symbolsmall v =
      smallsym_string_of_body (body_of_val v)

   // XXX notyet
   encode_symbolobject _s =
      error "Cannot encode symbol objects yet"
   decode_symbolobject _v =
      error "Cannot decode symbol objects yet"


// val.rs line 249
submodule Raw where
   type T = Val

   /*
    * Inspection functions
    */

   // val.rs lines 685-688
   get_payload : T -> [64]
   get_payload x = x.bits

   // val.rs lines 690-693
   from_payload : [64] -> T
   from_payload x = Val { bits = x }

   // val.rs lines 685-688
   shallow_eq : T -> T -> Bool
   shallow_eq x y = x.bits == y.bits

   // val.rs lines 726-729
   has_tag : Tag -> T -> Bool
   has_tag t rv = get_tag rv == t

   //from_symbol_small : Body::T -> RawVal
   //from_symbol_small body = from_body_and_tag body tag_symbolsmall

   // val.rs lines 731-736
   from_body_and_tag : [BODY_BITS] -> Tag -> T
   from_body_and_tag body tag = val_of_body_tag body tag

   // val.rs lines 738-744
   from_major_minor_and_tag : [MAJOR_BITS] -> [MINOR_BITS] -> Tag -> T
   from_major_minor_and_tag major minor tag =
      val_of_major_minor_tag major minor tag

   singleton : Tag -> T
   singleton = from_body_and_tag 0

   get_tag : T -> Tag
   get_tag v = tag_of_val v

   get_body : T -> [BODY_BITS]
   get_body v = body_of_val v

   get_major : T -> [MAJOR_BITS]
   get_major v = major_of_val v

   get_minor : T -> [MINOR_BITS]
   get_minor v = minor_of_val v

import submodule Raw as Raw

////////////////////////////////////////////////////////////
// void
// val.rs lines 278-292, 771-774

submodule Void where
   newtype T = { val : Val }

   unit : T
   unit = T { val = val_unit }

   valid' : Val -> Bool
   valid' v = val_eq v val_unit

   valid : T -> Bool
   valid x = valid' x.val

   to_raw : T -> Val
   to_raw x = x.val

   from_raw : Val -> Option::T T
   from_raw x =
      if valid' x then Option::some (T { val = x })
      else Option::none' (T { val = badval })

   to_native : T -> ()
   to_native _ = ()

   from_native : () -> T
   from_native () = unit

unit = Void::unit


////////////////////////////////////////////////////////////
// bool
// val.rs lines 294-327, 776-780, 810-11

submodule Bool where
   newtype T = { val : Val }

   true : T
   true = T { val = val_true }

   false : T
   false = T { val = val_false }

   valid' : Val -> Bool
   valid' v = val_eq v val_true \/ val_eq v val_false

   valid : T -> Bool
   valid b = valid' b.val

   to_raw : T -> Val
   to_raw b = b.val

   from_raw : Val -> Option::T T
   from_raw b =
      if valid' b then Option::some (T { val = b })
      else Option::none' (T { val = badval })

   to_native : T -> Bool
   to_native b =
      if val_eq b.val true.val then True else False

   from_native : Bool -> T
   from_native b = if b then true else false

true = Bool::true
false = Bool::false


////////////////////////////////////////////////////////////
// u32

submodule U32 where
   valid' : Val -> Bool
   valid' v = tag_of_val v == tag_u32val /\ minor_of_val v == 0

   to_raw : [32] -> Raw::T
   to_raw u = Raw::from_major_minor_and_tag u 0 tag_u32val

   from_raw : Raw::T -> Option::T [32]
   from_raw rv = Option::mk (valid' rv) (major_of_val rv)

import submodule U32 as U32

////////////////////////////////////////////////////////////
// symbol
// symbol.rs (more or less all of it)

submodule Symbol where
   newtype T = { val : Val }

   valid' : Val -> Bool
   valid' v =
      (tag == tag_symbolsmall /\ smallsym_body_valid (body_of_val v)) \/
      (tag == tag_symbolobject /\ False /* XXX notyet */ )
      where
         tag = tag_of_val v

   valid : T -> Bool
   valid x = valid' x.val

   to_raw : T -> Val
   to_raw x = x.val

   from_raw : Val -> Option::T T
   from_raw v =
      if valid' v then Option::some (T { val = v })
      else Option::none' (T { val = badval })

   from_native : {n} fin n => String n -> T
   from_native x
      | n <= MAX_SMALL_CHARS => T { val = encode_symbolsmall x }
      | n > MAX_SMALL_CHARS => T { val = encode_symbolobject x }

   /*
    * XXX this doesn't work
    */
/*
   to_native : {n} fin n => T -> String n
   to_native x =
      if tag == tag_symbolsmall then decode_symbolsmall x.val
      else decode_symbolobject x.val
      where
         tag = tag_of_val x.val
*/

   /* workarounds: */
   is_small : T -> Bool
   is_small x = tag_of_val x.val == tag_symbolsmall

   to_native_small : {n} n <= MAX_SMALL_CHARS => T -> String n
   to_native_small x = decode_symbolsmall x.val

   to_native_object : {n} n > MAX_SMALL_CHARS => T -> String n
   to_native_object x = decode_symbolobject x.val


////////////////////////////////////////////////////////////
// vecobject
// val.rs line 330

// TBD

////////////////////////////////////////////////////////////
// mapobject
// val.rs line 331

// TBD

////////////////////////////////////////////////////////////
// addressobject
// val.rs line 332

// TBD

////////////////////////////////////////////////////////////
// workarounds for saw-script #1964
// (cannot refer to cryptol submodule elements directly)
type VoidT = Void::T
type BoolT = Bool::T
type U32T = /*U32::T*/ [32]
type SymbolT = Symbol::T
type RawT = Raw::T

bool_from_native = Bool::from_native
symbol_from_native = Symbol::from_native

void_from_raw = Void::from_raw
bool_from_raw = Bool::from_raw
u32_from_raw = U32::from_raw
symbol_from_raw = Symbol::from_raw

u32_to_raw = U32::to_raw
symbol_to_raw = Symbol::to_raw

raw_from_payload = Raw::from_payload
raw_get_payload = Raw::get_payload
