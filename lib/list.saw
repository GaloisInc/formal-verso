typedef ListAPI = {
  concats : ([[a]] -> [a]),
  unzip : ([(a, b)] -> ([a], [b])),
  map : ((a -> b) -> [a] -> [b]),
  mapM : ((a -> M b) -> [a] -> M [b]),
  foldl : ((b -> a -> b) -> b -> [a] -> b),
  range : (Int -> Int -> [Int]),
  sequence : ([m a] -> m [a])
};

typedef StringListAPI = {
  elem : (String -> [String] -> Bool)
};

let list : ListAPI =

  /*
   * note: saw's "concat" is append (as in xs ++ ys), not what's
   * usually called concat, which is this.
   */
  rec concats (xss : [[a]]) : [a] =
    if null xss then
      []
    else
      concat (head xss) (concats (tail xss)) in

  rec map (f : a -> b) (xs : [a]) : [b] =
    if null xs then
      []
    else
      concat [f (head xs)] (map f (tail xs)) in

  rec unzip (xys : [(a, b)]) : ([a], [b]) =
    if null xys then
      ([], [])
    else
      let (x, y) = head xys in
      let (xs, ys) = unzip (tail xys) in
      (concat [x] xs, concat [y] ys)
  in

  rec mapM (f : a -> M b) (xs : [a]) : M [b] = do {
    if null xs then
      return []
    else do {
      h <- f (head xs);
      t <- mapM f (tail xs);
      return (concat [h] t);
    };
  } in

  rec foldl (f : b -> a -> b) (acc : b) (xs : [a]) : b =
    if null xs then
      acc
    else
      foldl f (f acc (head xs)) (tail xs) in

  let range (begin : Int) (end : Int) : [Int] =
    map eval_int (eval_list {{ [begin..end] : [_][64] }}) in

  let sequence xs = for xs (\x -> x) in

  {
    concats = concats,
    unzip = unzip,
    map = map,
    mapM = mapM,
    foldl = foldl,
    range = range,
    sequence = sequence
  };

string_list <- do {

  Util <- cryptol_load "Util.cry";

  rec elem (x : String) (xs : [String]) : Bool =
    if null xs then
      false
    else
      let h = head xs in
      if eval_bool {{ Util::lenPolyEq h x }} then
        true
      else
        elem x (tail xs);

  return ({
    elem = elem
  } : StringListAPI);

};
