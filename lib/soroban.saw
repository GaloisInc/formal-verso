enable_experimental;

typedef SorobanCry = {
  Bool_ : CryptolModule,
  RawVal : CryptolModule,
  Storage : CryptolModule,
  Symbol : CryptolModule,
  Void : CryptolModule
};

typedef SorobanAdt = {
  // soroban_env_guest
  Guest : MIRAdt,
  // soroban_sdk
  Env : MIRAdt,
  MaybeEnv : MIRAdt,
  Storage : MIRAdt,
  Symbol : MIRAdt,
  // soroban_env_common
  Bool_ : MIRAdt,
  RawVal : MIRAdt,
  SymbolVal : MIRAdt,
  Void : MIRAdt
};

typedef SorobanSpecAPI = {

  storage : {
    state : (Term /* Storage */ -> MIRSetup ()),
    has : (Term /* Storage */ -> Term /* k */ -> Term /* Bit */),
    get : (Term /* Storage */ ->
      Term /* k */ -> Type /* = v */ -> Term /* Option (Option v) */),
    set : (Term /* Storage */ ->
      Term /* k */ -> Term /* v */ -> Term /* Storage */)
  },

  fresh : (String -> Type -> MIRSetup Term),

  mir_value : {
    Guest : MIRValue,
    Env : MIRValue,
    MaybeEnv : MIRValue,
    Storage : MIRValue
  },
  to_mir_value : (Term -> MIRValue),
  to_mir_type : (Type -> MIRType)

};

typedef SorobanVerifyArgs = {
  fun : String,
  overrides : [MIRSpec],
  path_sat : Bool,
  spec : MIRSetup (),
  proof : ProofScript ()
};

typedef SorobanAPI = {
  cry: SorobanCry,
  adt : SorobanAdt,
  spec : (String -> (SorobanSpecAPI -> MIRSetup ()) -> MIRSetup ()),
  verify : (SorobanVerifyArgs -> TopLevel MIRSpec)
};

soroban_init <- do {

  Bool_ <- cryptol_load "Bool.cry";
  Option <- cryptol_load "Option.cry";
  RawVal <- cryptol_load "RawVal.cry";
  Storage <- cryptol_load "Storage.cry";
  Symbol <- cryptol_load "Symbol.cry";
  U32 <- cryptol_load "U32.cry";
  Util <- cryptol_load "Util.cry";
  Void <- cryptol_load "Void.cry";

  let soroban_init (mod : MIRModule) : TopLevel SorobanAPI = do {

    state <- do {
      storage <- declare_ghost_state "Soroban::storage";
      return {
        storage = storage
      };
    };

    let soroban_cry : SorobanCry = {
      Bool_ = Bool_,
      RawVal = RawVal,
      Storage = Storage,
      Symbol = Symbol,
      Void = Void
    };

    let soroban_adt : SorobanAdt = {
      // soroban_env_guest
      Guest = mir_find_adt mod "soroban_env_guest::guest::Guest" [],
      // soroban_sdk
      Env = mir_find_adt mod "soroban_sdk::env::Env" [],
      MaybeEnv = mir_find_adt mod "soroban_sdk::env::MaybeEnv" [],
      Storage = mir_find_adt mod "soroban_sdk::storage::Storage" [],
      Symbol = mir_find_adt mod "soroban_sdk::symbol::Symbol" [],
      // soroban_env_common
      Bool_ = mir_find_adt mod "soroban_env_common::raw_val::Bool" [],
      RawVal = mir_find_adt mod "soroban_env_common::raw_val::RawVal" [],
      SymbolVal = mir_find_adt mod "soroban_env_common::symbol::Symbol" [],
      Void = mir_find_adt mod "soroban_env_common::raw_val::Void" []
    };

    let mir_value =
      let mir_value_Guest =
        mir_struct_value soroban_adt.Guest [] in
      let mir_value_Env =
        mir_struct_value soroban_adt.Env [mir_value_Guest] in
      let mir_value_MaybeEnv =
        mir_struct_value soroban_adt.MaybeEnv [mir_value_Guest] in
      let mir_value_Storage =
        mir_struct_value soroban_adt.Storage [mir_value_Env] in
      {
        Guest = mir_value_Guest,
        Env = mir_value_Env,
        MaybeEnv = mir_value_MaybeEnv,
        Storage = mir_value_Storage
      };

    let type_eq (t1 : Type) (t2 : Type) : Bool =
      let s1 = show t1 in
      let s2 = show t2 in
      eval_bool {{ Util::lenPolyEq s1 s2 }};

    let to_raw (t : Type) : Term /* t -> RawVal */ =
      if type_eq t {| [32] |} then
        {{ U32::to_raw }}
      else
        {{ \(s : t) -> s.raw }};

    let from_raw (t : Type) : Term /* RawVal -> Option t */ =
      if type_eq t {| [32] |} then
        {{ U32::from_raw }}
      else if type_eq t {| Bool_::T |} then
        {{ Bool_::from_raw }}
      else if type_eq t {| Void::T |} then
        {{ Void::from_raw }}
      else if type_eq t {| Symbol::T |} then
        {{ Symbol::from_raw }}
      else
        run (fail (str_concat (show t) " cannot be converted from RawVal"));

    let type_valid (t : Type) : Term /* t -> Bit */ =
      if type_eq t {| Bool_::T |} then
        {{ Bool_::valid }}
      else if type_eq t {| Void::T |} then
        {{ Void::valid }}
      else if type_eq t {| Symbol::T |} then
        {{ Symbol::valid }}
      else
        // default to no conditions
        {{ \_ -> True }};

    rec to_mir_value x =
      let t = type x in
      if type_eq t {| RawVal::T |} then
        mir_struct_value soroban_adt.RawVal [
          mir_term {{ x.payload }}
        ]
      else if type_eq t {| Bool_::T |} then
        mir_struct_value soroban_adt.Bool_ [
          to_mir_value {{ x.raw }}
        ]
      else if type_eq t {| Void::T |} then
        mir_struct_value soroban_adt.Void [
          to_mir_value {{ x.raw }}
        ]
      else if type_eq t {| Symbol::T |} then
        mir_struct_value soroban_adt.Symbol [
          mir_value.MaybeEnv,
          mir_struct_value soroban_adt.SymbolVal [
            to_mir_value {{ x.raw }}
          ]
        ]
      else
        // fall back to mir_term
        mir_term x;

    let to_mir_type t =
      if type_eq t {| [32] |} then
        mir_u32
      else if type_eq t {| RawVal::T |} then
        mir_adt soroban_adt.RawVal
      else if type_eq t {| Bool_::T |} then
        mir_adt soroban_adt.Bool_
      else if type_eq t {| Void::T |} then
        mir_adt soroban_adt.Void
      else if type_eq t {| Symbol::T |} then
        mir_adt soroban_adt.Symbol
      else
        run (fail (str_concat (show t) " cannot be converted to MIRType"));

    let spec_storage = {

      state = \storage -> do {
        mir_ghost_value state.storage storage;
      },

      has = \storage k ->
        let k_to_raw = to_raw (type k) in
        {{ Storage::has storage (k_to_raw k) }},

      get = \storage k tv ->
        let k_to_raw = to_raw (type k) in
        let v_from_raw = from_raw tv in
        {{ Option::fmap
            (Storage::get storage (k_to_raw k))
            v_from_raw }},

      set = \storage k v ->
        let k_to_raw = to_raw (type k) in
        let v_to_raw = to_raw (type v) in
        {{ Storage::set storage (k_to_raw k) (v_to_raw v) }}

    };

    let soroban_spec spec_name spec = do {

      spec {

        storage = spec_storage,

        fresh = \name t -> do {
          x <- mir_fresh_cryptol_var (str_concats [spec_name, "::", name]) t;
          let valid = type_valid t;
          mir_assert {{ valid x }};
          return x;
        },

        mir_value = mir_value,
        to_mir_value = to_mir_value,
        to_mir_type = to_mir_type

      };

    };

    let sdk_specs = {

      internal_env =

        let adt_Infallible = mir_find_adt mod "core::convert::Infallible" [] in
        let adt_ResultInfallible (t : MIRType) =
          mir_find_adt mod "core::result::Result" [t, mir_adt adt_Infallible] in

        let return_ok (x : Term) : MIRSetup () =
          mir_return
            (mir_enum_value
              (adt_ResultInfallible (to_mir_type (type x)))
              "Ok"
              [to_mir_value x]) in

        {

          has_contract_data = soroban_spec
            "soroban_sdk::env::{impl#12}::has_contract_data"
            (\(s : SorobanSpecAPI) -> do {

              storage <- s.fresh "storage" {| Storage::T |};

              self <- mir_alloc (mir_adt soroban_adt.Env);
              mir_points_to self s.mir_value.Env;

              k <- s.fresh "k" {| RawVal::T |};

              s.storage.state storage;

              mir_execute_func [self, s.to_mir_value k];

              s.storage.state storage;

              return_ok {{ Bool_::from_bit (Storage::has storage k) }};

            }),

          get_contract_data = soroban_spec
            "soroban_sdk::env::{impl#12}::get_contract_data"
            (\(s : SorobanSpecAPI) -> do {

              storage <- s.fresh "storage" {| Storage::T |};

              self <- mir_alloc (mir_adt soroban_adt.Env);
              mir_points_to self s.mir_value.Env;

              k <- s.fresh "k" {| RawVal::T |};

              mir_precond {{ Storage::has storage k }};
              s.storage.state storage;

              mir_execute_func [self, s.to_mir_value k];

              s.storage.state storage;

              return_ok {{ (Storage::get storage k).value }};

            }),

          put_contract_data = soroban_spec
            "soroban_sdk::env::{impl#12}::put_contract_data"
            (\(s : SorobanSpecAPI) -> do {

              storage <- s.fresh "storage" {| Storage::T |};

              self <- mir_alloc (mir_adt soroban_adt.Env);
              mir_points_to self s.mir_value.Env;

              k <- s.fresh "k" {| RawVal::T |};
              v <- s.fresh "v" {| RawVal::T |};

              s.storage.state storage;

              mir_execute_func [self, s.to_mir_value k, s.to_mir_value v];

              s.storage.state {{ Storage::set storage k v }};

              return_ok {{ Void::void }};

            })

        }

    };

    let unsafe_assume_specs (specs : [(String, MIRSetup ())]) =
      for specs (\(name, spec) -> mir_unsafe_assume_spec mod name spec);

    sdk_overrides <- unsafe_assume_specs [
      ("soroban_sdk::env::{impl#12}::has_contract_data",
        sdk_specs.internal_env.has_contract_data),
      ("soroban_sdk::env::{impl#12}::get_contract_data",
        sdk_specs.internal_env.get_contract_data),
      ("soroban_sdk::env::{impl#12}::put_contract_data",
        sdk_specs.internal_env.put_contract_data)
    ];

    let soroban_verify (args : SorobanVerifyArgs) =
      mir_verify mod args.fun (concat sdk_overrides args.overrides)
        args.path_sat args.spec args.proof;

    return {

      cry = soroban_cry,

      adt = soroban_adt,

      spec = soroban_spec,

      verify = soroban_verify

    };

  };

  return soroban_init;

};
